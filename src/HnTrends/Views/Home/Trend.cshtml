@model TrendViewModel
@{
    ViewData["Title"] = $"Trend: {Model.Term}";
}

@if (Model.MaxCount == 0)
{
    <h3>No data in series</h3>
    <p>There were no stories containing the term '@Model.Term' in the data series.</p>
}
else
{
    <h3>Data for '@Model.Term'</h3>
    <div class="remark">Search term is case insensitive.</div>
    <p>This shows the count of stories posted to HackerNews featuring the search term in the title or URL by <span id="period">Day</span>.</p>
    <p>The data is not updated in real time. Currently the data runs between <em>@Model.From.ToShortDateString()</em> and <em>@Model.To.ToShortDateString()</em>.</p>

    <input id="data-load" type="hidden" asp-for="Data" />

    <label for="period-selector" style="display: inline-block; margin-right: 25px;">
        Group Data By:
        <select id="period-selector" onchange="periodSelectorChanged()" style="width: 200px; margin-left: 25px; height: 36px;">
            <option label="Day">Day</option>
            <option label="Week">Week</option>
            <option label="Month" selected>Month</option>
        </select>
    </label>

    <button type="button" id="percent" onclick="togglePercent()">Display as % of stories</button>
    <div id="plot" style="width: 90%; height: 600px;"></div>
}


@section Scripts {
    <script>
        var categories = ["Day", "Week", "Month"];

        function addDays(date, days) {
            var result = new Date(date);
            result.setDate(result.getDate() + days);
            return result;
        }

        function loadDataFromHiddenInput() {
            var str = $("#data-load").val();
            var json = JSON.parse(str);
            var start = moment(json.Start);

            var dates = [];

            for (var i = 0; i < json.Counts.length; i++) {
                dates.push(start.toDate());
                start.add(1, 'd');
            }

            json.Dates = dates;

            return json;
        }

        function buildXAxis(data, period) {
            var last = data.x[data.x.length - 1];
            var max = period !== "Day"
                ? last
                : addDays(Date.parse(last), 1);

            return {
                range: [data.x[0], max],
                type: 'date',
                linecolor: '#333',
                linewidth: 1,
                title: period
            };
        }

        function buildYAxis(data, isCount) {
            var max = Math.max.apply(Math, isCount ? data.y : data.yPercent);
            return {
                range: [0, isCount ? (max + 1) : max + 0.1],
                linecolor: '#333',
                linewidth: 1,
                title: isCount ? '# of stories' : '% of total stories'
            };
        }

        function getPlotlyLayout(data, isCount, period) {
            return {
                xaxis: buildXAxis(data, period),
                yaxis: buildYAxis(data, isCount),
                title:'Posts over time for \'@Model.Term\'.',
                hovermode: 'closest'
            };
        }

        function getModeBarSettings() {
            return { modeBarButtonsToRemove: ['toImage', 'pan2d', 'lasso2d', 'autoScale2d', 'toggleSpikelines', 'select2d'] };
        }

        function dataForPeriod(data, period) {
            var dateLabels = [];
            var yData = [];
            var yPercentData = [];

            var previous;
            var dataRequiresFlattening = false;
            
            data.Dates.forEach((x, i) => {
                switch (period) {
                    case "Week":
                        dataRequiresFlattening = true;
                        groupDataPointsByPeriod(data,
                            x,
                            i,
                            dateLabels,
                            yData,
                            yPercentData,
                            previous,
                            x => moment(x).endOf('week').toDate());
                        previous = x;
                        break;
                    case "Month":
                        dataRequiresFlattening = true;
                        groupDataPointsByPeriod(data,
                            x,
                            i,
                            dateLabels,
                            yData,
                            yPercentData,
                            previous,
                            x => moment(x).startOf('month').toDate());
                        previous = x;
                        break;
                case "Day":
                default:
                    dateLabels.push(x);
                    yData.push(data.Counts[i]);
                    yPercentData.push((data.Counts[i] / data.DailyTotals[i]) * 100);
                    break;
                }
            });

            if (dataRequiresFlattening) {
                yData.forEach((x, i) => {
                    if (yPercentData[i] === 0) {
                        yPercentData[i] = 0;
                        return;
                    }
                    yPercentData[i] = (x / yPercentData[i]) * 100;
                });
            }

            return {
                y: yData,
                yPercent: yPercentData,
                x: dateLabels
            };
        }

        function groupDataPointsByPeriod(data, date, index, dateLabels, yData, yPercentData,
            previous,
            periodGrouper) {
            var dayCount = data.Counts[index];
            var dayTotal = data.DailyTotals[index];

            var periodForThisDate = periodGrouper(date);

            if (index === 0) {
                dateLabels.push(periodForThisDate);
                yData.push(dayCount);
                yPercentData.push(dayTotal);
            } else {
                var periodForPreviousDate = periodGrouper(previous);

                if (periodForThisDate.toDateString() === periodForPreviousDate.toDateString()) {
                    yData[yData.length - 1] += dayCount;
                    yPercentData[yPercentData.length - 1] += dayTotal;
                } else {
                    dateLabels.push(periodForThisDate);
                    yData.push(dayCount);
                    yPercentData.push(dayTotal);
                }
            }
        }

        function getPlotlyData(data, isCount, period) {
            return [
                {
                    x: data.x,
                    y: isCount ? data.y : data.yPercent,
                    type: 'scatter',
                    mode: period !== "Day" ? 'lines' : 'markers',
                    marker: {
                        size: 3
                    },
                    line: {
                        width: period === "Month" ? 2 : 1
                    }
                }
            ];
        }

        function getPlotlyElement() {
            return document.getElementById('plot');
        }

        function periodSelectorChanged() {
            var period = $("#period-selector").val();

            if (categories.indexOf(period) < 0) {
                return;
            }

            togglePeriod(period);
        }

        function togglePeriod(period) {
            document.hntrendstore.CurrentCategory = period;

            $("#period").text(period);

            var isCount = document.hntrendstore.isCount;
            var data = dataForPeriod(loadDataFromHiddenInput(), document.hntrendstore.CurrentCategory);
            Plotly.newPlot(getPlotlyElement(),
                getPlotlyData(data, isCount, document.hntrendstore.CurrentCategory),
                getPlotlyLayout(data, isCount, document.hntrendstore.CurrentCategory),
                getModeBarSettings());
        }

        function togglePercent() {
            var current = document.hntrendstore.isCount;
            var isCount = !current;

            $('#percent').text(isCount ? 'Display as % of total stories' : 'Display as # of stories');
            document.hntrendstore.isCount = isCount;
            var data = dataForPeriod(loadDataFromHiddenInput(), document.hntrendstore.CurrentCategory);
            Plotly.newPlot(getPlotlyElement(),
                getPlotlyData(data, isCount, document.hntrendstore.CurrentCategory),
                getPlotlyLayout(data, isCount, document.hntrendstore.CurrentCategory),
                getModeBarSettings());
        }
        
        $(function () {

            document.hntrendstore = {
                isCount: true,
                CurrentCategory: "Month"
            };

            if (!$('#data-load').length) {
                return;
            }

            $("#period").text(document.hntrendstore.CurrentCategory);


            var json = loadDataFromHiddenInput();

            var data = dataForPeriod(json, document.hntrendstore.CurrentCategory);
            
            Plotly.plot(getPlotlyElement(),
                getPlotlyData(data, true, document.hntrendstore.CurrentCategory),
                getPlotlyLayout(data, true, document.hntrendstore.CurrentCategory),
                getModeBarSettings());
        });
    </script>
}