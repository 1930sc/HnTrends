@model TrendViewModel
@{
    ViewData["Title"] = $"Trend: {Model.Term}";
}

@if (Model.MaxCount == 0)
{
    <h3>No data in series</h3>
    <p>There were no stories containing the term '@Model.Term' in the data series.</p>
}
else
{
    <h3>Data for '@Model.Term'</h3>
    <div class="remark">Search term is case insensitive.</div>
    <p>This shows the count of stories posted to HackerNews featuring the search term in the title or URL by day.</p>
    <p>The data is not updated in real time. Currently the data runs between <em>@Model.From.ToShortDateString()</em> and <em>@Model.To.ToShortDateString()</em>.</p>

    <input id="data-load" type="hidden" asp-for="Data" />
    <button type="button" id="percent" onclick="togglePercent()">Display as % of daily stories</button>
    <div id="plot" style="width: 90%; height: 600px;"></div>
}


@section Scripts {
    <script>
        function addDays(date, days) {
            var result = new Date(date);
            result.setDate(result.getDate() + days);
            return result;
        }

        function loadDataFromHiddenInput() {
            var str = $("#data-load").val();
            var json = JSON.parse(str);
            return json;
        }

        function buildXAxis(data, isWeekly) {
            var last = data.x[data.x.length - 1];
            var max = isWeekly
                ? last
                : addDays(Date.parse(last), 1);

            return {
                range: [data.x[0], max],
                type: 'date',
                linecolor: '#333',
                linewidth: 1,
                title: isWeekly ? 'Week Ending' : 'Day'
            };
        }

        function buildYAxis(data, isCount) {
            var max = Math.max.apply(Math, isCount ? data.y : data.yPercent);
            return {
                range: [0, isCount ? (max + 1) : max + 0.1],
                linecolor: '#333',
                linewidth: 1,
                title: isCount ? '# of stories' : '% of total stories'
            };
        }

        function getPlotlyLayout(data, isCount, isWeekly) {
            return {
                xaxis: buildXAxis(data, isWeekly),
                yaxis: buildYAxis(data, isCount),
                title:'Posts over time for \'@Model.Term\'.',
                hovermode: 'closest'
            };
        }

        function getModeBarSettings() {
            return { modeBarButtonsToRemove: ['toImage', 'pan2d', 'lasso2d', 'autoScale2d', 'toggleSpikelines', 'select2d'] };
        }

        function getWeekLabelForDate(date) {
            return moment(date).year() + '-' + moment(date).week();
        }

        function dataForPeriod(data, isWeekly) {
            var dateLabels = [];
            var yData = [];
            var yPercentData = [];

            var previous;
            
            data.Dates.forEach((x, i) => {
                if (!isWeekly) {
                    dateLabels.push(x);
                    yData.push(data.Counts[i]);
                    yPercentData.push((data.Counts[i] / data.DailyTotals[i]) * 100);
                } else if (i === 0) {
                    dateLabels.push(moment(x).endOf('week').toDate());
                    yData.push(data.Counts[i]);
                    yPercentData.push(data.DailyTotals[i]);

                    previous = x;
                } else {
                    var weekLabel = getWeekLabelForDate(previous);
                    var currentWeekLabel = getWeekLabelForDate(x);

                    if (currentWeekLabel === weekLabel) {
                        yData[yData.length - 1] += data.Counts[i];
                        yPercentData[yPercentData.length - 1] += data.DailyTotals[i];
                    } else {
                        dateLabels.push(moment(x).endOf('week').toDate());
                        yData.push(data.Counts[i]);
                        yPercentData.push(data.DailyTotals[i]);
                    }

                    previous = x;
                }
            });

            if (isWeekly) {
                yData.forEach((x, i) => {
                    yPercentData[i] = (x / yPercentData[i]) * 100;
                });
            }

            return {
                y: yData,
                yPercent: yPercentData,
                x: dateLabels
            };
        }

        function getPlotlyData(data, isCount, isWeekly) {
            return [
                {
                    x: data.x,
                    y: isCount ? data.y : data.yPercent,
                    type: 'scatter',
                    mode: isWeekly ? 'lines' : 'markers'
                }
            ];
        }

        function getPlotlyElement() {
            return document.getElementById('plot');
        }

        function togglePercent() {
            var current = document.hntrendstore.isCount;
            var isCount = !current;
            var isWeekly = true;
            $('#percent').text(isCount ? 'Display as % of total stories' : 'Display as # of stories');
            document.hntrendstore.isCount = isCount;
            var data = dataForPeriod(loadDataFromHiddenInput(), isWeekly);
            Plotly.newPlot(getPlotlyElement(),
                getPlotlyData(data, isCount, isWeekly),
                getPlotlyLayout(data, isCount, isWeekly),
                getModeBarSettings());
        }
        
        $(function () {
            if (!$('#data-load').length) {
                return;
            }

            document.hntrendstore = {
                isCount: true
            };

            var json = loadDataFromHiddenInput();

            var data = dataForPeriod(json, true);

            console.log(data);

            Plotly.plot(getPlotlyElement(),
                getPlotlyData(data, true, true),
                getPlotlyLayout(data, true, true),
                getModeBarSettings());
        });
    </script>
}